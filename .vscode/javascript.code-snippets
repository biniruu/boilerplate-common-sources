{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "arrow function": {
    "scope": "javascript",
    "prefix": "arrFunc",
    "body": [
      "($1) => {", //
      "  $2",
      "}"
    ],
    "description": "Arrow function"
  },
  "arrow function in one line": {
    "scope": "javascript",
    "prefix": "arrFuncInOne",
    "body": "($1) => $2",
    "description": "Arrow function"
  },
  "arrow function as a variable": {
    "scope": "javascript",
    "prefix": "arrFuncAsVar",
    "body": [
      "const $1 = ($2) => {", //
      "  $3",
      "}"
    ],
    "description": "Arrow function"
  },
  "arrow function as a variable in one line": {
    "scope": "javascript",
    "prefix": "arrFuncAsVarInOne",
    "body": "const $1 = ($2) => $3",
    "description": "Arrow function"
  },
  "const variable": {
    "scope": "javascript, typescript",
    "prefix": "const",
    "body": "const $1 = $2",
    "description": "variable"
  },
  "let variable": {
    "scope": "javascript, typescript",
    "prefix": "let",
    "body": "let $1 = $2",
    "description": "variable"
  }
}
